ggplot(score,aes(over,runs)) + geom_bar(stat = "identity",fill = aes(color=score$stage)) + coord_trans() + scale_x_continuous(breaks = pretty(score$over,n=20)) + geom_hline(yintercept = mean(score$runs))
ggplot(score,aes(over,runs)) + geom_bar(stat = "identity",fill = score$stage) + coord_trans() + scale_x_continuous(breaks = pretty(score$over,n=20)) + geom_hline(yintercept = mean(score$runs))
ggplot(score,aes(over,runs)) + geom_bar(stat = "identity",fill = factor(score$stage)) + coord_trans() + scale_x_continuous(breaks = pretty(score$over,n=20)) + geom_hline(yintercept = mean(score$runs))
ggplot(score,aes(over,runs)) + geom_bar(stat = "identity",fill = aes(color=factor(score$stage))) + coord_trans() + scale_x_continuous(breaks = pretty(score$over,n=20)) + geom_hline(yintercept = mean(score$runs))
ggplot(score,aes(over,runs)) + geom_bar(stat = "identity",fill = factor(stage)) + coord_trans() + scale_x_continuous(breaks = pretty(score$over,n=20)) + geom_hline(yintercept = mean(score$runs))
str(score)
score$stage <- as.factor(score$stage)
ggplot(score,aes(over,runs)) + geom_bar(stat = "identity",fill = stage) + coord_trans() + scale_x_continuous(breaks = pretty(score$over,n=20)) + geom_hline(yintercept = mean(score$runs))
ggplot(score,aes(over,runs)) + geom_bar(stat = "identity",fill = "stage") + coord_trans() + scale_x_continuous(breaks = pretty(score$over,n=20)) + geom_hline(yintercept = mean(score$runs))
ggplot(score,aes(over,runs)) + geom_bar(stat = "identity",fill = aes(color=stage)) + coord_trans() + scale_x_continuous(breaks = pretty(score$over,n=20)) + geom_hline(yintercept = mean(score$runs))
ggplot(score,aes(over,runs)) + geom_bar(stat = "identity",fill = aes(color, stage)) + coord_trans() + scale_x_continuous(breaks = pretty(score$over,n=20)) + geom_hline(yintercept = mean(score$runs))
ggplot(score,aes(over,runs,fill=stage)) + geom_bar(stat = "identity") + coord_trans() + scale_x_continuous(breaks = pretty(score$over,n=20)) + geom_hline(yintercept = mean(score$runs))
ggplot(score,aes(over,runs,fill=stage)) + geom_bar(stat = "identity") + coord_trans() + scale_x_continuous(breaks = pretty(score$over,n=20)) + geom_hline(yintercept = mean(score$runs)) + facet_wrap(.~stage)
ggplot(score,aes(over,runs)) + geom_bar(stat = "identity") + coord_trans() + scale_x_continuous(breaks = pretty(score$over,n=20)) + geom_hline(yintercept = mean(score$runs)) + facet_wrap(.~stage)
ggplot(score,aes(over,runs)) + geom_bar(stat = "identity") + coord_trans() + scale_x_continuous(breaks = pretty(score$over,n=20)) + geom_hline(yintercept = mean(score$runs)) + facet_wrap(. ~ stage)
ggplot(score,aes(over,runs)) + geom_bar(stat = "identity") + coord_trans() + scale_x_continuous(breaks = pretty(score$over,n=20)) + geom_hline(yintercept = mean(score$runs)) + facet_wrap(stage ~ .)
ggplot(score,aes(over,runs)) + geom_bar(stat = "identity") + coord_trans() + scale_x_continuous(breaks = pretty(score$over)) + geom_hline(yintercept = mean(score$runs)) + facet_wrap(stage ~ .)
ggplot(score,aes(over,runs)) + geom_bar(stat = "identity")  + geom_hline(yintercept = mean(score$runs)) + facet_wrap(stage ~ .)
ggplot(score,aes(over,runs)) + geom_bar(stat = "identity") + facet_wrap(stage ~ .)
ggplot(score,aes(over,runs)) + geom_bar(stat = "identity") + coord_trans() + scale_x_continuous(breaks = pretty(score$over,n=20)) + geom_hline(yintercept = mean(score$runs)) + facet_wrap(.~stage)
ggplot(score,aes(over,runs)) + geom_bar(stat = "identity") + coord_trans() + scale_x_continuous(breaks = pretty(score$over,n=20)) + geom_hline(yintercept = mean(score$runs)) + facet_grid(.~stage)
ggplot(score,aes(over,runs)) + geom_bar(stat = "identity") + coord_trans() + scale_x_continuous(breaks = pretty(score$over,n=20)) + geom_hline(yintercept = mean(score$runs)) + facet_grid(stage~.)
?apply
cscore <- apply(score,length(score),function(x)ifelse(score$over == 0,score$runs[],sc))
score$runs[1,]
score$runs[1,1]
score$runs[1]
score$runs[2]
cscore <- apply(score,length(score),function(x)ifelse(score$over == 0,score$runs[x],score$runs[x] + score$runs[x-1]))
cscore <- apply(score,length(score),function(x)ifelse(score$over[x] == 1,score$runs[x],score$runs[x] + score$runs[x-1]))
cscore <- apply(score,length(score),function(x)ifelse(score$over[x] == 1,score$runs[x],score$runs[x] + score$runs[x-1]))
length(score)
cscore <- apply(score,function(x)ifelse(score$over[x] == 1,score$runs[x],score$runs[x] + score$runs[x-1]))
cscore <- apply(score,20,function(x)ifelse(score$over[x] == 1,score$runs[x],score$runs[x] + score$runs[x-1]))
cscore <- apply(score,1,function(x)ifelse(score$over[x] == 1,score$runs[x],score$runs[x] + score$runs[x-1]))
cscore
?lapply
cscore <- lapply(score,function(x)ifelse(score$over[x] == 1,score$runs[x],score$runs[x] + score$runs[x-1]))
cscore
score$runs[2] + score$runs[1]
cscore <- lapply(score$runs,function(x)ifelse(score$over[x] == 1,score$runs[x],score$runs[x] + score$runs[x-1]))
cscore
cscore <- sapply(score$runs,function(x)ifelse(score$over[x] == 1,score$runs[x],score$runs[x] + score$runs[x-1]))
cscore
cscore <- sapply(score$runs,function(x)ifelse(x$over == 1,x$runs[x],score$runs[x] + score$runs[x-1]))
myfunction <- function(x,y) ifelse(x$over==1,x$runs[y],x$runs[y] = x$runs[y-1])
myfunction <- function(x,y) ifelse(x$over==1,x$runs[y],x$runs[y] + x$runs[y-1])
cscore <- sapply(score$runs,myfunction(score,c(1:20)))
cscore <- sapply(score$runs,myfunction,c(1:20))
cscore <- sapply(score,myfunction,c(1:20))
cscore <- lapply(score,myfunction,c(1:20))
swirl()
head(airquality)
xyplot(Ozone~Wind,airquality)
xyplot(Ozone~Wind,airquality,col="red",pch=8,main="Big Apple Data")
xyplot(Ozone~Wind,data = airquality,col="red",pch=8,main="Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main = "Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits]]
p[["x.limits]]
p[["x.limits"]]
table(f)
xyplot()
xyplot(y~xlf)
xyplot(y~xlf,layout = c(2,1))
xyplot(y~x|f,layout = c(2,1))
v1
v2
myedit("plot1.R")
pathtofile("plot1.R",local=TRUE)
pathtofile("plot1.R")
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color,diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"),local=TRUE)
xyplot(price~carat | color * cut, data = diamonds,strip = FALSE, pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat | color * cut, data = diamonds, pch=20,xlab=myxlab,ylab=myylab,main=mymain)
sample(colors(),10)
pal <- colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette(c("blue","green"),alpha=0.5)
p3(5)
x
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5),alpha=0.3)
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
cols <- brewer.pal(3,"BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano,col = pal(20))
image(volcano,col = p1(20))
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(votes, rating, data = movies)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality) + geom_smooth()
qplot(Wind, Ozone, data = airquality) + stats_smooth()
o <- c(1:20)
cpoints <- seq(0,1,len=4)
cpoints
r <- cut(o,cpoints)
r
cpoints <- seq(1,20,len=4)
r <- cut(o,cpoints)
r
cpoints
cpoints <- seq(1,20,len=5)
cpoints
cpoints <- quantile(o,seq(0,1,len=4))
cpoints
r <- cut(o,cpoints)
r
ls
ls()
system('clear')
d <- dist(as.matrix(mtcars))
hc <- hclust(d)
plot(hc)
d
head(d)
str(d)
summary(dist)
dist
summary(d)
swirl()
dataFrame
dist(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
plot(hc)
as.dendrogram(hc)
plot(as.dendrogram(hc))
abline(h=1.5,col="blue")
abline(h=0.4,col="red")
5
12
abline(h=0.05,col="green")
dFsm
dist(dFsm)
hc
dataMatrix
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
denmt
plot(denmt)
distmt
mtcard
mtcars
distmt
head(mtcars)
head(distmt)
mydistmt <- dist(mtcars)
mydistmt
heatmap(mydistmt)
heatmap(mtcars)
myhclust <- hclust(mydistmt)
plot(myhclust)
mtcars
mtcars[5,]
mtcars[length(mtcars),]
length(mtcars)
nrow(mtcars)
mtcars[nrow(mtcars)-1,]
mtcars[11,]
mtcars[1,]
mtcars[2,]
airquality
daq <- dist(airquality)
daq
haq <- hclust(daq)
plot(haq)
s <- c("aa","bb")
t <- c("aa","cc")
s %in% t
t <- c("aa","cc","xx")
s %in% t
s <- c("aa","bb","xx","cd")
s %in% t
library(swirl)
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames,"|",fixed = TRUE)
cnames
wcol
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0),log10(x1))
negative <- x1 < 0
sum(negative,na.rm=T)
sum(negative,na.rm=TRUW)
sum(negative,na.rm=TRUE)
mean(negative,na.rm=TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates),"%Y%m%d")
head(dates)
hist(dates[negative],"month")
hist(dates[negative],"week")
str(site0)
both <- intersect(site0,site1)
both
head(pm0)
cnt0 <- subset(pm0,State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1,State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0,County.Code == 63 & Site.Id == 2008)
pm0sub <- subset(cnt0,County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1,County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date),"%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date),"%Y%m%d")
par(mfrow=c(1,2),mar=c(4,4,2,1))
plot(dates0,x0sub,pch=20)
abline(h=median(x0sub,na.rm = TRUE),lwd=2)
plot(dates1,x1sub,pch=20)
abline(h=median(x1sub,na.rm = TRUE),lwd=2)
rng <- range(x0sub, x1sub, na.rm=TRUE)
rng
mn0 <- with(pm0,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn0)
mn1 <- with(pm1,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
View(mn0)
names(mn0)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
d1
mrg <- merge(d0, d1, by = "state")
dim(mrg)
head(mrg)
plot()
plot(mrg)
with(mrg, plot(rep(1, 52), mrg[, 2], xlim = c(.5, 2.5)))
with(mrg, plot(rep(2, 52), mrg[, 3])
)
with(mrg, points(rep(2, 52), mrg[, 3]))
with(mrg, plot(rep(1, 52), mrg[, 2], xlim = c(.5, 2.5)))
with(mrg, points(rep(2, 52), mrg[, 3]))
segments(rep(1, 52), mrg[, 2], rep(2, 52), mrg[, 3])
mrg[mrg$mean.x < mrg$mean.y, ]
mtcars
?lm
lm(mpg ~ cyl + hp + gear, mtcars)
l <- lm(mpg ~ cyl + hp + gear, mtcars)
l
View(l)
l <- lm(mpg ~ cyl)
l <- lm(mpg ~ cyl,mtcars)
l
sessionInfo()
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
1 - ((2+1)/36)
deck
1/52
52
4/52
0
12/52
3/51
2/51
0.64
0.64
mypdf
integrate(mypdf,lower = 0, upper = 1.6)
1
sqrt(2)
library(swirl)
swirl()
1 - 1/12
deck
52
1/13
0
12/52
5/51
2/51
0.8*0.8
0.64
mypdf
integrate(mypdf,lower = 0,upper = 1.6)
1
sqrt(2)
.997*.001
(1-.985)*(1-.001)
0.000997/(0.000997+0.014985)
21/6
expect_dice()
expect_dice
expect_dice(1)
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
.023
.5*(edh+edl)
myfunc
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
.997*.001
(1-0.985) * (1-0.001)
0.000997/(0.000997 + 0.014985)
?qunif
setwd("~/Desktop/Coursera/RepData_PeerAssessment1")
opts_chunk$set(message = FALSE, fig.width = 6, fig.height = 6)
head(activity)
unzip("activity.zip")
activity <- read.csv("activity.csv", header = TRUE)
head(activity)
library(dplyr)
str(activity)
activity <- mutate(activity, date = as.Date(date))
str(activity)
stepsbyday <- activity %>% select(date,steps) %>% group_by(date) %>% filter(!is.na(steps)) %>% summarise(sum
)
stepsbyday <- activity %>% select(date,steps) %>% group_by(date) %>% filter(!is.na(steps)) %>% summarise(sum)
stepsbyday <- activity %>% select(date,steps) %>% group_by(date) %>% filter(!is.na(steps)) %>% summarise(sum(steps))
hist(stepsbyday)
head(stepsbyday)
hist(stepsbyday$`sum(steps)`)
mean(stepsbyday$`sum(steps)`)
median(stepsbyday$`sum(steps)`)
stepsbyday <- activity %>% select(date,steps) %>% group_by(date) %>% filter(!is.na(steps)) %>% summarise(sum(steps) as totalsteps)
stepsbyday <- activity %>% select(date,totalsteps) %>% group_by(date) %>% filter(!is.na(steps)) %>% summarise(sum(steps) as totalsteps)
stepsbyday <- activity %>% select(date,totalsteps) %>% group_by(date) %>% filter(!is.na(steps)) %>% summarise(sum(steps) )
stepsbyday <- activity %>% select(date) %>% group_by(date) %>% filter(!is.na(steps)) %>% summarise(sum(steps) )
stepsbyday <- activity %>% select(date,steps %>% group_by(date) %>% filter(!is.na(steps)) %>% summarise(sum(steps) )
s
stepsbyday <- activity %>% select(date,steps %>% group_by(date) %>% filter(!is.na(steps)) %>% summarise(sum(steps) )
x
stepsByDay <- activity %>%
select(date,steps) %>%
group_by(date) %>%
filter(!is.na(steps)) %>%
summarize(Total.Steps = sum(steps))
stepsByDay
hist(stepsByDay$Total.Steps)
head(activity)
na.replace <- function(act) {
ddply(act, ~interval, function(dd) {
steps <- dd$steps
dd$steps[is.na(steps)] <- mean(steps, na.rm = TRUE)
return(dd)
})
}
imputedActivity <- na.replace(activity)
library(ddply)
activity$steps[is.na(activity$steps)] <- mean(activity$steps,na.rm = TRUE)
activity
head(activity)
library(lubridate)
ifelse(weekdays("2016-05-23" == 5,"weekend"))
weekdays("2016-05-23")
weekdays(Sys.Date())
weekdays(Sys.Date(),abr=TRUE)
weekdays(Sys.Date(),abbreviate = TRUE)
ifelse(weekdays(Sys.Date(),abbreviate = TRUE) in c("Sat","Sun"),"Weekend","Weekday")
ifelse(weekdays(Sys.Date(),abbreviate = TRUE) %in% c("Sat","Sun"),"Weekend","Weekday")
ifelse(weekdays(Sys.Date()-1,abbreviate = TRUE) %in% c("Sat","Sun"),"Weekend","Weekday")
ifelse(weekdays(Sys.Date()-2,abbreviate = TRUE) %in% c("Sat","Sun"),"Weekend","Weekday")
ifelse(weekdays(Sys.Date()-3,abbreviate = TRUE) %in% c("Sat","Sun"),"Weekend","Weekday")
library(knitr)
?knit2html
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
View(stepsByDay)
View(activity)
knit2html("PA1_template.md")
setwd("~/Desktop/Coursera/RepData_PeerAssessment1")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
# Chunk 1
require(knitr)
require(plyr)
require(dplyr)
require(ggplot2)
# Chunk 2: setoptions
opts_chunk$set(echo = TRUE,message = FALSE)
# Chunk 3
unzip("activity.zip")
activity <- read.csv("activity.csv", header = TRUE)
activity <- mutate(activity, date = as.Date(date))
# Chunk 4
stepsByDay <- activity %>%
select(date,steps) %>%
group_by(date) %>%
filter(!is.na(steps)) %>%
summarize(Total.Steps = sum(steps))
# Chunk 5
hist(stepsByDay$Total.Steps,
main = "Total number of steps per day",
xlab = "Total steps per day",
ylab = "Frequency")
# Chunk 6
meanStepsPerDay <- mean(stepsByDay$Total.Steps, na.rm = TRUE)
medianStepsPerDay <- median(stepsByDay$Total.Steps, na.rm = TRUE)
# Chunk 7
avgStepsPerInterval <- activity %>%
select(interval,steps) %>%
group_by(interval) %>%
filter(!is.na(steps)) %>%
summarize(Avg.Steps = mean(steps))
# Chunk 8
p <- ggplot(avgStepsPerInterval, aes(x=interval, y=Avg.Steps)) + geom_line()
p <- p + ggtitle("Average Daily Activity Pattern")
p + xlab("Interval") + ylab("Average Number of steps")
# Chunk 9
maxId <- which.max(avgStepsPerInterval$Avg.Steps)
maxInterval <- avgStepsPerInterval$interval[maxId]
# Chunk 10
countOfNAs <- sum(apply(is.na(activity), 1, any))
# Chunk 11
na.impute <- function(act) {
ddply(act, ~interval, function(dd) {
steps <- dd$steps
dd$steps[is.na(steps)] <- mean(steps, na.rm = TRUE)
return(dd)
})
}
# Chunk 12
imputed.activity <- na.impute(activity)
# Chunk 13
imputed.stepsByDay <- imputed.activity %>%
select(date,steps) %>%
group_by(date) %>%
filter(!is.na(steps)) %>%
summarize(Total.Steps = sum(steps))
# Chunk 14
hist(imputed.stepsByDay$Total.Steps,
main = "Total number of steps per day",
xlab = "Total steps per day",
ylab = "Frequency")
# Chunk 15
imputedMeanStepsPerDay <- mean(imputed.stepsByDay$Total.Steps)
imputedMedianStepsPerDay <- median(imputed.stepsByDay$Total.Steps)
# Chunk 16
imputed.activity <- mutate(imputed.activity,
weekpart = ifelse(weekdays(imputed.activity$date,abbreviate = TRUE) %in% c("Sat","Sun"),"Weekend","Weekday")
)
imputed.activity$weekpart <- as.factor(imputed.activity$weekpart)
# Chunk 17
avgSteps <- imputed.activity %>%
select(interval,weekpart,steps) %>%
group_by(interval,weekpart) %>%
summarise(mean=mean(steps))
p <- ggplot(avgSteps, aes(x = interval, y = mean))
p <- p + geom_line() + facet_grid(. ~ weekpart)
p <- p + ggtitle("Activity patterns on weekends and weekdays")
p + xlab("Interval") + ylab("Number of steps")
